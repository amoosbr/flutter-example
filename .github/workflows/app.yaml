name: App CICD Workflow

on:
  workflow_dispatch:
  push:

defaults:
  run:
    shell: bash

jobs:
  build-android:
    name: Build Android
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"
      - name: Setup Android SDK
        if: ${{ env.ACT }}
        uses: android-actions/setup-android@v2
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.0.5"
          channel: "stable"
      #          cache: true
      #          cache-key: 'flutter-:os:-:channel:-:version:'
      #          cache-path: '${{ runner.tool_cache }}/flutter/:os:-:channel:-:version:'
      - run: flutter pub get
      - run: flutter test
      - run: flutter build appbundle
      - name: Push APK to Releases
        uses: softprops/action-gh-release@v0.1.14
        if: ${{ !env.ACT }}
        with:
          tag_name: "dev"
          files: |
            build/app/outputs/apk/release/*.apk
            build/app/outputs/flutter-apk/*.apk
            build/app/outputs/bundle/release/*.aab
      - name: Install AppCenter CLI
        run: |
          npm install --location=global appcenter-cli
          appcenter telemetry off
      - name: Distribute to AppCenter
        env:
          APPCENTER_ACCESS_TOKEN: ${{ secrets.APPCENTER_ACCESS_TOKEN }}
        run: |
          appcenter distribute release \
            --group "Internal" \
            --file 'build/app/outputs/bundle/release/app-release.aab' \
            --release-notes 'New GH Actions release' \
            --app bosch-adme/Flutter-Test-1 \
            --token $APP_CENTER_TOKEN \
            --silent \
            --quiet
  build-ios:
    name: Build iOS
    runs-on: macos-latest
    if: ${{ !github.event.act }} # skip during local workflow testing with act
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"
      #      - name: Set Ruby Version
      #          uses: ruby/setup-ruby@v1
      #          with:
      #            bundler-cache: true # runs 'bundle install' and caches installed gems automatically
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.0.5"
          channel: "stable"
      #          cache: true
      #          cache-key: 'flutter-:os:-:channel:-:version:'
      #          cache-path: '${{ runner.tool_cache }}/flutter/:os:-:channel:-:version:'
      - name: Install the Apple certificate and provisioning profile
        env:
          # gh secret set IOS_DEVELOPMENT_CERTIFICATE_BASE64 --body $(base64 ~/Downloads/rb_amo5fe_apple_developement_certificate_automation_expiring_20230809.p12)
          APPLE_CERTIFICATE_BASE64: ${{ secrets.IOS_DEVELOPMENT_CERTIFICATE_BASE64 }}
          # gh secret set IOS_DEVELOPMENT_P12_PASSWORD
          APPLE_P12_PASSWORD: ${{ secrets.IOS_DEVELOPMENT_P12_PASSWORD }}
          # gh secret set IOS_DEVELOPMENT_PROVISION_PROFILE_BASE64 --body $(base64 ~/Downloads/XCAD_Mobility_Ecosystem__ADME_Wildcard_Dev.mobileprovision)
          APP_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_DEVELOPMENT_PROVISION_PROFILE_BASE64 }}
          # gh secret set KEYCHAIN_PASSWORD
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # define paths variables
          CERTIFICATE_PATH=$RUNNER_TEMP/apple_certificate.p12
          PROVISION_PROFILE_PATH=$RUNNER_TEMP/app_profile.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # decode certificates, profiles from secrets to local files
          echo -n "$APPLE_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$APP_PROVISION_PROFILE_BASE64" | base64 --decode --output $PROVISION_PROFILE_PATH

          # create temporary signing keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$APPLE_P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply app provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PROVISION_PROFILE_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      - run: flutter pub get
      - run: |
          cd ios
          pod install
      - run: flutter build ipa --export-options-plist=ios/export_options.plist
      # Clean-up keychain on self-hosted stateful runners
      #      - name: Clean up keychain and provisioning profile
      #        if: ${{ always() }}
      #        run: |
      #          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
      #          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision
      - name: Push APK to Releases
        uses: softprops/action-gh-release@v0.1.14
        if: ${{ !env.ACT }}
        with:
          tag_name: "dev"
          files: |
            build/ios/ipa/*.ipa
      - name: Install AppCenter CLI
        run: |
          npm install --location=global appcenter-cli
          appcenter telemetry off
      - name: Distribute to AppCenter
        env:
          APPCENTER_ACCESS_TOKEN: ${{ secrets.APPCENTER_ACCESS_TOKEN }}
        run: |
          appcenter distribute release \
            --group "Internal" \
            --file 'build/ios/ipa/my_app.ipa' \
            --release-notes 'New GH Actions release' \
            --app bosch-adme/Flutter-Test \
            --token $APP_CENTER_TOKEN \
            --silent \
            --quiet
